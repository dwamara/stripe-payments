package com.dwitech.eap.stripe.payments.boundary;

import com.dwitech.eap.stripe.payments.entity.PaymentRequest;
import com.stripe.exception.StripeException;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.openapi.annotations.OpenAPIDefinition;
import org.eclipse.microprofile.openapi.annotations.Operation;
import org.eclipse.microprofile.openapi.annotations.info.Contact;
import org.eclipse.microprofile.openapi.annotations.info.Info;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;
import org.eclipse.microprofile.openapi.annotations.tags.Tag;

import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.UriInfo;

import static com.stripe.Stripe.apiKey;
import static com.stripe.model.PaymentIntent.create;
import static com.stripe.param.PaymentIntentCreateParams.builder;
import static java.lang.Double.parseDouble;
import static javax.json.Json.createObjectBuilder;
import static javax.ws.rs.core.MediaType.APPLICATION_JSON;
import static javax.ws.rs.core.Response.Status.*;
import static javax.ws.rs.core.Response.ok;
import static javax.ws.rs.core.Response.status;

@Path("/ac")
@Produces(APPLICATION_JSON)
@Consumes(APPLICATION_JSON)
@OpenAPIDefinition(info = @Info(
        title = "Stripe Automatic Confirmation",
        version = "1.0.0",
        contact = @Contact(
                name = "Daniel Wamara",
                email = "dwamara@dwitech.com",
                url = "http://www.dwitech.com")
)
)
@Tag(name = "Automatic confirmation service", description = "Return the client secret generated by the Stripe platform for a payment request for automatic confirmation")
public class AutomaticConfirmationEndpoint {
    @ConfigProperty(name = "stripe.currency") String defaultCurrency;
    @ConfigProperty(name = "stripe.secret.key") String secretKey;

    @POST
    @Operation(description = "Process the payment for a particular request via a POST request")
    @APIResponses({
            @APIResponse(responseCode = "200", description = "Successful, returning the client secret for this payment request"),
            @APIResponse(responseCode = "400", description = "Error, the transaction amount was 0, missing from the request or was not in a valid format"),
            @APIResponse(responseCode = "500", description = "Error, there was a problem notified by the Stripe service")
    })
    public Response generateClientSecretFromHttpPostRequest(final PaymentRequest request) {
        apiKey = secretKey;
        ResponseBuilder responseBuilder;

        try {
            if (emptyParameter(request.getAmount())) {
                return status(BAD_REQUEST).entity(
                        createObjectBuilder().add("message", "transaction amount is required")
                ).build();
            }

            final PaymentIntentCreateParams createParams = builder()
                    .setAmount(new Double(request.getAmount()).longValue())
                    .setCurrency(request.getCurrency() == null || request.getCurrency().isEmpty() ? defaultCurrency : request.getCurrency())
                    .build();

            final PaymentIntent intent = create(createParams);
            responseBuilder = ok(
                    createObjectBuilder().add("client_secret", intent.getClientSecret()
                    ).build()
            );
        } catch (NumberFormatException nfExc) {
            return status(BAD_REQUEST)
                    .entity(createObjectBuilder().add("message", "transaction amount was invalid")
                    ).build();
        } catch (StripeException sExc) {
            responseBuilder = status(INTERNAL_SERVER_ERROR).entity(
                    createObjectBuilder().add("message", sExc.getMessage()
                    ).build()
            );
        }
        return responseBuilder.build();
    }

    @GET
    @Operation(description = "Process the payment for a particular request via a GET request")
    @APIResponses({
            @APIResponse(responseCode = "200", description = "Successful, returning the client secret for this payment request"),
            @APIResponse(responseCode = "400", description = "Error, the transaction amount was 0, missing from the request or was not in a valid format"),
            @APIResponse(responseCode = "500", description = "Error, there was a problem notified by the Stripe service")
    })
    public Response generateClientSecretFromHttpGetRequest(@Context UriInfo info) {
        try {
            if (emptyParameter(info.getQueryParameters().getFirst("amount"))) {
                return status(BAD_REQUEST)
                        .entity(createObjectBuilder().add("message", "transaction amount is required")
                        ).build();
            }

            final double amount = parseDouble(info.getQueryParameters().getFirst("amount"));
            final String currency = emptyParameter(info.getQueryParameters().getFirst("currency")) ? defaultCurrency : info.getQueryParameters().getFirst("currency");
            return generateClientSecretFromHttpPostRequest(new PaymentRequest(amount, currency));
        } catch (NumberFormatException nfExc) {
            return status(BAD_REQUEST)
                    .entity(createObjectBuilder().add("message", "transaction amount was invalid")
                    ).build();
        }
    }

    private boolean emptyParameter(final String param) {
        return param == null || param.isEmpty();
    }

    private boolean emptyParameter(final Double param) {
        return param == null || param == 0;
    }
}
